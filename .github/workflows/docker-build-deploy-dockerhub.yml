name: Docker Build and Deploy (DockerHub)

on:
  push:
    branches:
      - master
      - develop
      - 'feature/docker-*'
    paths:
      - 'docker/**'
      - 'apps/**'
      - 'libs/**'
      - 'package*.json'
      - 'angular.json'
      - 'tsconfig*.json'
      - '.github/workflows/docker-build-deploy-dockerhub.yml'
  pull_request:
    branches:
      - master
      - develop
    paths:
      - 'docker/**'
      - 'apps/**'
      - 'libs/**'
      - 'package*.json'
      - 'angular.json'
      - 'tsconfig*.json'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag'
        required: true
        default: 'latest'
      push_to_dockerhub:
        description: 'Push to DockerHub'
        required: true
        default: true
        type: boolean

env:
  # Multi-registry support
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-docker-components:
    name: Test Docker Components
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint Docker files
        run: |
          # Install hadolint for Dockerfile linting
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          ./hadolint docker/Dockerfile

      - name: Validate Docker Compose
        run: |
          # Install docker-compose for validation
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Validate compose file
          docker-compose -f docker/config/docker-compose.example.yml config

      - name: Validate required secrets for DockerHub
        if: github.event_name != 'pull_request'
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "Warning: DOCKERHUB_USERNAME secret not set - will only push to GitHub Container Registry"
          else
            echo "DockerHub username configured: ${{ secrets.DOCKERHUB_USERNAME }}"
          fi

          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Warning: DOCKERHUB_TOKEN secret not set - will only push to GitHub Container Registry"
          else
            echo "DockerHub token configured"
          fi

      - name: Run Docker-specific tests
        run: |
          # Run unit tests for database API
          npm test -- --config docker/tests/jest.config.js --coverage
        env:
          NODE_ENV: test

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage/docker/lcov.info
          flags: docker-tests
          name: docker-component-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  build-and-test-image:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test-docker-components
    timeout-minutes: 45

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: false
          load: true
          tags: keira3:test
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start MySQL for testing
        run: |
          # Start MySQL container for testing
          docker run -d \
            --name mysql-test \
            --network host \
            -e MYSQL_ROOT_PASSWORD=test_password \
            -e MYSQL_DATABASE=test_db \
            -e MYSQL_USER=test_user \
            -e MYSQL_PASSWORD=test_password \
            -p 3306:3306 \
            mysql:8.0 \
            --bind-address=0.0.0.0

          # Wait for MySQL to be ready
          echo "Waiting for MySQL to be ready..."
          timeout 60s bash -c 'until docker exec mysql-test mysqladmin ping -h localhost --silent; do sleep 2; done'

      - name: Test image startup
        run: |
          # Start container with test database
          docker run -d \
            --name keira3-test \
            --network host \
            -e KEIRA_DATABASE_HOST=localhost \
            -e KEIRA_DATABASE_PORT=3306 \
            -e KEIRA_DATABASE_USER=test_user \
            -e KEIRA_DATABASE_PASSWORD=test_password \
            -e KEIRA_DATABASE_NAME=test_db \
            -e DB_API_PORT=3001 \
            -e KEIRA_PORT=8080 \
            keira3:test

      - name: Wait for container startup
        run: |
          echo "Waiting for container to be ready..."

          # Check container status
          docker ps -a

          # Check container logs for any immediate errors
          echo "=== Container Logs ==="
          docker logs keira3-test

          # Wait for API health endpoint first (it's critical)
          echo "Waiting for API health endpoint..."
          timeout 180s bash -c 'until docker exec keira3-test curl -f -s http://127.0.0.1:3001/health >/dev/null 2>&1; do
            echo "API health check failed, retrying in 5 seconds..."
            sleep 5
          done' || {
            echo "API health check failed after 3 minutes"
            echo "Final API health check attempt:"
            docker exec keira3-test curl -v http://127.0.0.1:3001/health || true
            docker logs keira3-test
            exit 1
          }

          # Wait for web health endpoint
          echo "Waiting for web health endpoint..."
          timeout 180s bash -c 'until docker exec keira3-test curl -f -s http://127.0.0.1:8080/health >/dev/null 2>&1; do
            echo "Web health check failed, retrying in 5 seconds..."
            sleep 5
          done' || {
            echo "Web health check failed after 3 minutes"
            echo "Final web health check attempt:"
            docker exec keira3-test curl -v http://127.0.0.1:8080/health || true
            docker logs keira3-test
            exit 1
          }

      - name: Test container health
        run: |
          echo "Testing all health endpoints..."

          # Test API health endpoint
          echo "Testing API health endpoint..."
          docker exec keira3-test curl -f http://127.0.0.1:3001/health || {
            echo "API health check failed"
            docker logs keira3-test
            exit 1
          }

          # Test web health endpoint
          echo "Testing web health endpoint..."
          docker exec keira3-test curl -f http://127.0.0.1:8080/health || {
            echo "Web health check failed"
            docker logs keira3-test
            exit 1
          }

          # Test API endpoints
          docker exec keira3-test curl -f http://127.0.0.1:3001/api/database/state

      - name: Test database connectivity
        run: |
          # Test database connection through API
          docker exec keira3-test curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"config":{"host":"localhost","port":3306,"user":"test_user","password":"test_password","database":"test_db"}}' \
            http://127.0.0.1:3001/api/database/connect

      - name: Check container logs
        if: failure()
        run: |
          echo "=== Container Logs ==="
          docker logs keira3-test
          echo "=== Container Status ==="
          docker ps -a

      - name: Cleanup test containers
        if: always()
        run: |
          docker stop keira3-test || true
          docker rm keira3-test || true
          docker stop mysql-test || true
          docker rm mysql-test || true

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test-image
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    environment: Docker

    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      dockerhub-pushed: ${{ steps.dockerhub-check.outputs.pushed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check DockerHub configuration
        id: dockerhub-check
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "DockerHub credentials available"
            echo "pushed=true" >> $GITHUB_OUTPUT
          else
            echo "DockerHub credentials not available - will only push to GitHub Container Registry"
            echo "pushed=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        if: steps.dockerhub-check.outputs.pushed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ steps.dockerhub-check.outputs.pushed == 'true' && format('{0}/{1}/keira3', env.DOCKERHUB_REGISTRY, secrets.DOCKERHUB_USERNAME) || '' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (no push)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      - name: Report push results
        run: |
          echo "::notice title=GitHub Container Registry::Successfully pushed to ghcr.io/${{ env.IMAGE_NAME }}"

          if [ "${{ steps.dockerhub-check.outputs.pushed }}" == "true" ]; then
            echo "::notice title=DockerHub::Successfully pushed to docker.io/${{ secrets.DOCKERHUB_USERNAME }}/keira3"
          else
            echo "::warning title=DockerHub::Skipped - DockerHub credentials not configured"
          fi

